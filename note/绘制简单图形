# 绘制简单图形
除三角形外的所有多边形都可以分解为三角形，因此我们可以通过绘制多个三角形的方式来绘制多边形

## 三角形的绘制方式
* **GL_TRIANGGLES** ：将传入的顶点按照没3个一组组成一个三角形进行绘制 

* **GL_TRIANGLE_TRIP**：将传入的顶点按照顺序三个一组组成三角形进行，前面三个顶点的后两个顶点做为下一个三角形的前两个顶点，
    比如 有v0 v1 v2 v3 四个顶点顺序排列，则v0 v1 v2组成一个三角形，v1,v2,v3组成一个三角形。

* **GL_TRIANGLE_FAN**：三角形扇的形式，将传入的顶点数据的第一个顶点做为中心点，其他点做为边缘点绘制一系列组成扇形的相邻三角形。

1.定义着色器

        private final String vertexShaderCode = //顶点着色器代码
            "attribute vec4 vPosition;"+
            "void main(){"+
            "gl_Position = vPosition;"+
            "}";
        private final String fragmentShaderCode =//片段着色器代码
            "precision mediump float;" +
            "uniform vec4 vColor;" +
            "void main(){"+
            "gl_FragColor = vColor;" +
            "}";
            

2.定义顶点坐标

        static float triangleCoords[] = { //顶点坐标
            0.0f,0.5f,0.0f,
            -0.5f,-0.5f,0.0f,
            0.5f,-0.5f,0.0f,
    };
    
3.初始化GL程序

    //将坐标转换为floatBuffer
        vertexBuffer = Util.getFloatBuffer(triangleCoords);

        int vertexShader = Util.loadShader(GLES20.GL_VERTEX_SHADER,vertexShaderCode);//加载顶点着色器
        int fragmentShader = Util.loadShader(GLES20.GL_FRAGMENT_SHADER,fragmentShaderCode);//加载片段着色器
        mProgram = GLES20.glCreateProgram();//创建openGL es程序
        GLES20.glAttachShader(mProgram,vertexShader);//连接顶点着色器
        GLES20.glAttachShader(mProgram,fragmentShader);//连接片段着色器
        GLES20.glLinkProgram(mProgram);//创建openGL es可执行文件
        positionHandle = GLES20.glGetAttribLocation(mProgram,"vPosition");//获取位置句柄
        colorHandle = GLES20.glGetUniformLocation(mProgram,"vColor");//获取颜色句柄
        

4.绘制

        GLES20.glUseProgram(mProgram);//加载opengl es 程序

        GLES20.glEnableVertexAttribArray(positionHandle);//启用位置句柄
        // 关联顶点坐标属性和缓存数据
        GLES20.glVertexAttribPointer(positionHandle, // 1. 位置索引；
                COORDS_PER_VERTEX,// 2. 每个顶点属性需要关联的分量个数(必须为1、2、3或者4。初始值为4。)；
                GLES20.GL_FLOAT,// 3. 数据类型；
                false,// 4. 指定当被访问时，固定点数据值是否应该被归一化(GL_TRUE)或者直接转换为固定点值(GL_FALSE)(只有使用整数数据时)
                vertexStride,// 5. 指定连续顶点属性之间的偏移量。如果为0，那么顶点属性会被理解为：它们是紧密排列在一起的。初始值为0。
                vertexBuffer);// 6. 数据缓冲区
        GLES20.glUniform4fv(colorHandle,1,color,0);//设置颜色

        GLES20.glDrawArrays(GLES20.GL_TRIANGLES,0,vertexCount);//绘制三角形

        GLES20.glDisableVertexAttribArray(positionHandle);//禁用位置句柄
        GLES20.glDisableVertexAttribArray(colorHandle);//禁用颜色句柄
        

## 绘制一个填充的矩形
使用GL_LINE_LOOP只能绘制一个非填充矩形，所以可以尝试用画三角形的方式来绘制矩形

1.修改坐标

        static float triangleCoords[] = { //顶点坐标
            0.5f,  0.5f ,   // top left
            -0.5f,  0.5f  , // top right
            0.5f, -0.5f  , // bottom right
            -0.5f, -0.5f
    };


2.修改绘制模式

        GLES20.glDrawArrays(GLES20.GL_TRIANGLE_STRIP,0,vertexCount);
    
    
## 绘制一个圆形
绘制圆形的思路是，将圆形分割成多个三角形，然后使用GL_TRIANGLE_FAN的方法来进行绘制

1.根据圆心坐标和半径生成顶点坐标的集合

        private float[] getCirclePositions(float r,float x,float y) {
        //CIRCLE_SEGMENT 是分割的三角形的个数
        int nodeCount = CIRCLE_SEGMENT + 2;
        float[] posArrays = new float[nodeCount * COORDS_PER_VERTEX];
        int offset = 0;
        posArrays[offset++] = x;
        posArrays[offset++] = y;
        for (int i = 0; i<CIRCLE_SEGMENT+1;i++) {
            float angleInRadians = ((float)i/(float)CIRCLE_SEGMENT) * ((float)Math.PI*2f);
            posArrays[offset++] = x + r * (float)Math.sin(angleInRadians);
            posArrays[offset++] = y + r * (float)Math.cos(angleInRadians);
        }
        return posArrays;
    }
    
2.修改绘制的模式

        GLES20.glDrawArrays(GLES20.GL_TRIANGLE_FAN,0,vertexCount);//绘制三角形
        
#### 归一化
通过以上方式画出来的圆形在手机上显示出来是个椭圆形，这是因为opengl对手机设备的坐标做了归一化，就是将手机的宽高都映射到[-1,1]这个范围内，由于手机的比例一般都不是1：1，因此当我们想画一个圆的时候，需要做一次正交投影变换

1.顶点着色器添加矩阵变量

        private final String vertexShaderCode = //顶点着色器代码
                    "attribute vec4 vPosition;"+
                    "uniform mat4 u_Matrix;"+//矩阵变量
                    "void main(){"+
                    "gl_Position = u_Matrix * vPosition;"+
                    "}";
                    
        private final float[] projectionMatrix = new float[16];//矩阵
        private int uMatrixLocation;//矩阵句柄
                    
2.获取矩阵句柄
    
        uMatrixLocation = GLES20.glGetUniformLocation(mProgram,U_MATRIX);//获取矩阵句柄

3.创建投影矩阵

        /**
     * 根据屏幕宽高创建投影矩阵
     */
    public void projectionMatrix(int width,int height) {
        //计算宽高比
        final float aspectRatio = width > height ?
                (float)width/(float)height :
                (float)height/(float)width;
        if (width > height) {
            Matrix.orthoM(projectionMatrix,0,-aspectRatio,aspectRatio,-1f,1f,-1f,1f);
        } else {
            Matrix.orthoM(projectionMatrix,0,-1f,1f,-aspectRatio,aspectRatio,-1f,1f);
        }
    }
    
4.绘制的时候设置矩阵

    public void onDraw(){
        ...
         GLES20.glUniformMatrix4fv(uMatrixLocation,1,false,projectionMatrix,0);
         ...
    }